open-feign.distance.key=3ffaf4349cmsh9ac7982c92bfa92p19e6abjsnba4729663bdc

Request comes to:
    JwtRequestFilter -> UserSecurityService -> CustomUserDetails -> back to UserSecurityService -> back to JwtRequestFilter
        -> adds User to SecurityContextHolder.
    AppUser creates the bean which is injected
    Controller -> Service -> AuthenticationUtils -> returns response

TESTING
1   john.smith      Staged(1)      
2   mary.green      Active(2)      OK
4   jess.brown      Suspended(3)   OK      user can see and update profile. User cannot create/apply for journeys, accept/reject passengers.
5   tom.thompson    Locked_out(4)          you need to implement a counter for that
6   jake.sully      Admin(5)       OK
7   kyra.ohare      Dev(6)         N/A


x  authenticate as my.test@example.com (POST /v1/login) --> fail 403
x  create a user (POST /v1/users/create) --> pass. Repeat --> fail 409
x  authenticate (POST /v1/login) --> fail
x  confirm email (POST /v1/users/confirm-email) --> pass --> fail 409
x  authenticate (POST /v1/login) --> pass
x  see their profile without token (GET /v1/users/profile) --> fail 403
x  see their profile with token (GET /v1/users/profile) --> pass
x  update their phone number and dob (PATCH /v1/users) --> pass
x  see their profile with updated phone number and dob (GET /v1/users/profile) --> pass

x  see passenger's profile (GET /v1/passengers/profile) --> fail 404
x  see passenger's journeys (GET /v1/journeys/passengers/my-journeys) --> fail 404
x  join a journey (POST /v1/journeys/{journeyId}/add-passenger) --> fail 404
x  create passenger's profile (POST /v1/passengers/create) --> pass. Repeat --> fail 409
x  see passenger's profile (GET /v1/passengers/profile) --> pass
x  see passenger's journeys which is empty (GET /v1/journeys/passengers/my-journeys) --> fail 404
x  join a journey (POST /v1/journeys/{journeyId}/add-passenger) --> pass. Repeat --> fail 409
x  see passenger's journeys (GET /v1/journeys/passengers/my-journeys) --> pass
x  passenger gives up going on a journey which is not part of (DELETE /v1/journeys/{journeyId}/remove-passenger) --> fail 404
x  passenger gives up going on a journey which is part of (DELETE /v1/journeys/{journeyId}/remove-passenger) --> pass. Repeat --> fail 404

x  see driver's profile (GET /v1/drivers/profile) --> fail 404
x  see driver's journeys (GET /v1/journeys/drivers/my-journeys) --> fail 404
x  create a journey (POST /v1/journeys) --> fail 403
x  create driver's profile (POST /v1/drivers/create) --> pass. Repeat --> fail 409
x  see driver's profile (GET /v1/drivers/profile) --> pass
x  see driver's journeys which is empty (GET /v1/journeys/drivers/my-journeys) --> fail 404
x  create a journey (POST /v1/journeys) --> pass. Repeat and it keeps creating - is this a problem? Maybe the UI asks a question confirming if that is what the user wants to do.
x  see driver's journeys (GET /v1/journeys/drivers/my-journeys) --> pass
x  driver joins their journey ((POST /v1/journeys/{journeyId}/add-passenger) --> fail 409
x  delete someone else's journey (DELETE /v1/journeys/{journeyId}) --> fail 403
x  delete their journey (DELETE /v1/journeys/{journeyId}) --> pass

  my-test is a passenger of journey 3 which belongs to mary.green
  mary.green deletes journey 3
  my-test accesses /my-journeys and now it is empty --> fail 404

x  calculate a distance (GET /v1/journeys/calculateDistance) --> pass
x  search for a journey (GET /v1/journeys/search) --> pass

x  delete passenger's profile (DELETE /v1/passengers) --> pass 204
x  see passenger's profile (GET /v1/passengers/profile) --> fail 404
x  delete driver's profile (DELETE /v1/drivers) --> pass 204
x  see driver's profile (GET /v1/drivers/profile) --> fail 404
x  see user's profile (GET /v1/users/profile) --> pass
x  delete user's profile (DELETE /v1/users) --> pass
x  authenticate as my.test@example.com (POST /v1/login) --> fail 403

x  create another user (POST /v1/users/create) --> pass
x  confirm email (POST /v1/users/confirm-email) --> pass --> fail 409
x  create passenger's profile (POST /v1/passengers/create) --> pass
x  create driver's profile (POST /v1/drivers/create) --> pass
x  delete user's profile (DELETE /v1/users) --> pass (should get the user out of the system)

ADMIN ENDPOINTS
x  authenticate (POST /v1/login) --> pass
x  see their profile (GET /v1/users/profile) --> pass
x  create a my.test's profile: my.test@example.com
x  see my.test's profile (GET /v1/users/{platformUserId}) --> pass
x  update my.test's phone number and user access status (PATCH /v1/users/{platformUserId}) --> pass
x  see my.test's profile with updated phone number and user access status (GET /v1/users/{platformUserId}) --> pass
x  see a journey (GET /v1/journeys/{journeyId}) --> pass

x  see my.test's passenger's profile (GET /v1/passengers/{passengerId}) --> fail 404
x  create my.test's passenger's profile (POST /v1/passengers/{driverId}) --> pass. Repeat --> fail 409
x  see my.test's passenger's profile (GET /v1/passengers/{passengerId}) --> pass
x  see my.test's journeys (GET /v1/journeys/passengers/{passengerId}) --> fail 404
x  see if my.test is NOT a passenger of a joined journey (GET /v1/journeys/{passengerId}) --> pass
x  join my.test to a journey (POST /v1/journeys/{journeyId}/add-passenger/{passengerId}) --> pass. Repeat --> 409
x  see my.test's journeys (GET /v1/journeys/passengers/{passengerId}) --> pass
x  see if my.test is a passenger of this joined journey (GET /v1/journeys/{passengerId}) --> pass
x  remove my.test from a journey they are not joined (GET /v1/journeys/passengers/{passengerId}) --> fail 404
x  remove my.test from their journey (DELETE /v1/journeys/{journeyId}/remove-passenger/{passengerId}) --> pass. Repeat 404
x  join my.test to a journey (POST /v1/journeys/{journeyId}/add-passenger/{passengerId}) --> pass. Repeat --> 409
x  delete my.test's passenger's profile (DELETE /v1/passengers/{passengerId}) --> pass 204
x  see my.test's passenger's profile (GET /v1/passengers/{passengerId}) --> fail 404
x  see my.test's journeys (GET /v1/journeys/passengers/{passengerId}) --> fail 404
x  see my.test's created journey (GET /v1/journeys/{journeyId}) --> fail 404

x  see my.test's driver's profile (GET /v1/drivers/{driverId}) --> fail
x  create my.test's driver's profile (POST /v1/drivers/{driverId}) --> pass. Repeat --> fail 409
x  see my.test's driver's profile (GET /v1/drivers/{driverId}) --> pass
x  see my.test's driver's journeys (GET /v1/journeys/drivers/{driverId}) --> fail 404
x  create a journey for my.test's driver (POST /v1/journeys/drivers/{driverId}) --> pass. Repeat and it keeps creating - is this a problem? Maybe the UI asks a question confirming if that is what the user wants to do.
x  see my.test's driver's journeys (GET /v1/journeys/drivers/{driverId}) --> pass
x  join another passenger to a journey (POST /v1/journeys/{journeyId}/add-passenger/{passengerId}) --> pass
  join more passengers until it fails because of maxPassengers
x  see  my.test's driver's journeys with the new passenger(GET /v1/journeys/drivers/{driverId}) --> pass
x  join my.test's as a driver to their own journey (POST /v1/journeys/{journeyId}/add-passenger/{passengerId}) --> fail 409
x  delete my.test's driver's profile (DELETE /v1/drivers/{driverId}) --> pass 204
x  see my.test's driver's profile (GET /v1/drivers/{driverId}) --> fail
x  see  my.test's driver's journeys (GET /v1/journeys/drivers/{driverId}) --> fail 404

x  create my.test's passenger's profile (POST /v1/passengers/{driverId}) --> pass. Repeat --> fail 409
x  create my.test's driver's profile (POST /v1/drivers/{driverId}) --> pass. Repeat --> fail 409
x  delete the other user's profile (DELETE /v1/users/{platformUserId}) --> pass (should also delete their driver's and passenger's profiles)
x  see my.test's driver's profile (GET /v1/drivers/{driverId}) --> fail 404
x  see my.test's passenger's profile (GET /v1/passengers/{passengerId}) --> fail 404

------------

SELECT * FROM journey WHERE id = 1 ORDER BY id ASC;

SELECT * FROM journey ORDER BY id ASC;

SELECT * FROM platform_user WHERE id = 2;

UPDATE platform_user SET user_access_status_id = 3 WHERE id = 2;

SELECT * FROM driver;

SELECT * FROM passenger_journey WHERE journey_id = 2;

SELECT * FROM passenger_journey WHERE passenger_id = 2;

-----------

TODO:
test behaviours of different user access statuses
how to have a proper path in ExceptionBuilder.java line 23.
send email confirmations.
send emails to passengers to let them know when their journey was deleted by the driver.
create module-info.java

Swagger returns 200 but doesn't render
